- name: Create production server
  hosts: localhost
  connection: local
  vars:
    terraform_rc_path: .terraformrc
    terraform_path: ./tf
  tasks:
    - name: Prepare TF (set yandex mirror)
      copy:
        src: "{{ terraform_rc_path }}"
        dest: ~/.terraformrc

    - name: Run terraform
      environment:
        TF_VAR_username: "{{ lookup('env', 'TF_VAR_username') }}"
        TF_VAR_userpassword: "{{ lookup('env', 'TF_VAR_userpassword') }}"
      terraform:
        project_path: "{{ terraform_path }}"
        force_init: yes
        state: present
      register: trfrm

    - name: Export server IP up
      lineinfile:
        path: ~/myenv
        regexp: '^DEV_SERVER_IP='
        line: "DEV_SERVER_IP={{ trfrm.outputs.servers.value.serverip }}"
        mode: '0644'
        create: yes

    - name: Add instance host (Ansible term)
      add_host:
        name: timofeev-server
        groups: nodes
        ansible_ssh_user: ubuntu
        ansible_host: "{{ trfrm.outputs.servers.value.serverip }}"
        ansible_ssh_private_key_file: ~/.ssh/timofeevssh
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Wait for instance creating
  hosts: localhost
  connection: local     
  
  tasks:
    - name: Wait for a ssh port become available
      wait_for:
        host: "{{ trfrm.outputs.servers.value.serverip }}"
        port: 22

- name: Start production database 
  hosts: timofeev-server
  become: yes
  vars:
    sql_path: create.sql
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install `postgresql` server
      apt:
        name: postgresql
        state: present

    - name: Install python wrapper for Ansible's PostgreSQL plugin
      apt:
        name: python3-psycopg2
        state: present


    - name: Start `postgresql` service
      service:
        name: postgresql
        state: restarted
        enabled: yes

    - name: Install setfacl tool for changing user in Ansible
      apt:
        name: acl
        state: present


    # https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_user_module.html
    - name: Set user password
      become_user: postgres
      community.postgresql.postgresql_user:
        name: postgres
        password: 424242

    - name: Create database
      become_user: postgres
      community.postgresql.postgresql_db:
        name: tasks
        login_password: 424242

    - name: Copy sql import script
      copy:
        src: "{{ sql_path  }}"
        dest: /tmp/create.sql
        mode: u=rw,g=r,o=r
        owner: postgres
        group: postgres

    - name: Create tables
      become_user: postgres
      community.postgresql.postgresql_script:
        db: tasks
        path: /tmp/create.sql
        login_password: 424242 

    - name: Add db to hosts
      become: yes
      lineinfile:
        path: /etc/hosts
        regexp: ' db$'
        line: "127.0.0.1 db"
        create: yes

- name: Prepare production for deploy
  hosts: timofeev-server
  vars:
    service_path: taskbot.service
    terraform_path: tf
  tasks:
    - block:
      - name: Install JDK
        apt:
          update_cache: yes
          name: openjdk-21-jdk-headless
          state: present
        become: yes

      - name: Create bot app service
        copy:
          src: "{{ service_path }}"
          dest: /etc/systemd/system/taskbot.service
          mode: '0777'
        become: yes
    
      - name: Reload services
        systemd:
          daemon_reload: true
          name: taskbot
          state: stopped
        become: yes
   
      rescue:
       - name: Clean up resources in case of error
         terraform:
           project_path: "{{ terraform_path }}"
           state: absent
         delegate_to: localhost